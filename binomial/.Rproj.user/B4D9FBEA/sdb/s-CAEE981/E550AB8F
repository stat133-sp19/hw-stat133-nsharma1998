{
    "collab_server" : "",
    "contents" : "\n### 1.1) Private Checker Functions\n\n# Checks whether the probability is valid (between 0-1)\n\ncheck_prob = function(prob){\n  if (length(prob) > 1){\n    stop(\"p has to have length 1\")\n  }\n  if (!(is.numeric(prob))) {\n    stop(\"p has to be a number\")\n  }\n  if (prob < 0 | prob > 1) {\n    stop(\"p has to be betwen 0 and 1\")\n  }\n  else {\n    return(TRUE)\n  }\n}\n\n# Checks whether the number of trials is valid (non-negative)\n\ncheck_trials = function(trials){\n  if (length(trials) > 1){\n    stop(\"trials has to have length 1\")\n  }\n  if (!(is.numeric(trials)) | floor(trials) != trials) {\n    stop(\"trials has to be an integer\")\n  }\n  if (trials < 0){\n    stop(\"trials must be positive\")\n  }\n  else {\n    return(TRUE)\n  }\n}\n\n# Checks whether the number of successes is valid (non-negative)\n# Takes in single value or vector\n\ncheck_success = function(success, trials){\n  if (!(is.numeric(success))| sum(as.integer(success) != success) > 0){\n    stop(\"success must be an integer\")\n  }\n  if (sum(success < 0) > 0){\n    stop(\"success cannot be negative\")\n  }\n  if (sum(success > trials) > 0){\n    stop(\"success must be smaller than trials\")\n  }\n  else{\n    return(TRUE)\n  }\n}\n\n### 1.2) Private Functions\n\n# Returns the mean of binomial\n\naux_mean = function(trials, prob) {\n  return(trials * prob)\n}\n\n# Returns the variance of binomial\n\naux_variance = function(trials, prob) {\n  return(trials*(prob)*(1-prob))\n}\n\n# Returns the mode of the experiment\n\naux_mode = function(trial, prob){\n  mode = (trial + 1) * prob\n  if (as.integer(mode) == mode){\n    mode_two = mode - 1\n    return(c(mode_two, mode))\n  }\n  else{\n    return(as.integer(mode))\n  }\n}\n\n# Returns the skewness of binomial\n\naux_skewness = function(trial, prob){\n  skewness = (1-(2*prob))/sqrt(trial*(prob)*(1-prob))\n  return(skewness)\n}\n\n# Returns the kurtosis of binomial\n\naux_kurtosis = function(trial, prob){\n  kurtosis = (1- (6*(prob)*(1-prob)))/(trial*(prob)*(1-prob))\n  return(kurtosis)\n}\n\n### 1.3) Function bin_choose()\n\n#' @title binomial choose factor\n#' @description computes binomial choose factor\n#' @param n integer value for number of trials\n#' @param k integer value for number of successes\n#' @return integer value for choose factor\n#' @export\n#' @examples\n#'\n#' bin_choose(5, 2) returns 10\n#' bin_choose(5, 1:3) returns c(5, 10, 10)\n\n\nbin_choose = function(n,k){\n  if (check_trials(n) != TRUE){\n    stop(\"invalid trials value\")\n  }\n  if (check_success(k, n) != TRUE){\n    stop(\"invalid success value\")\n  }\n  if (sum(k > n) > 0){\n    stop(\"k cannot be greater than n\")\n  }\n  else{\n    return(factorial(n)/(factorial(k)*factorial(n-k)))\n  }\n}\n\n### 1.4) Function bin_probability()\n\n#' @title binomial probability\n#' @description computes probability of success for binomial distribution\n#' @param success integer value for number of successes\n#' @param trials integer value for number of trials\n#' @param prob numeric value for the probability of success\n#' @export\n#' @return computed binomial probability\n#' #' @examples\n#'\n#' bin_probability(5, 2, 0.5) returns 10/32\n#' bin_probability(5, 1:3, 0.5) returns c(5/32, 10/32, 10/32)\n\nbin_probability = function(success, trials, prob){\n\n  if (!(check_trials(trials))){\n    stop(\"invalid trials value\")\n  }\n  if (!(check_prob(prob))){\n    stop(\"invalid prob value\")\n  }\n  if (!(check_success(success, trials))){\n    stop(\"invalid success value\")\n  }\n  else{\n    probability = (bin_choose(trials,success))*\n      (prob^success)*((1-prob)^(trials-success))\n    return(probability)\n  }\n}\n\n### 1.5) Function bin_distribution\n\n#' @title binomial distribution\n#' @description computes the probability for success for all values of success\n#' @param trials integer value for number of trials\n#' @param prob numeric value for the probability of success\n#' @export\n#' @return dataframe with two classes: bindis and data.frame\n#' #' @examples\n#'\n#' bin_distribution(5, 0.5)\n#' bin_distribution(5, 0.2)\n\nbin_distribution = function(trials, prob){\n  success <- 0:trials\n  prob <- bin_probability(success, trials, prob)\n  object <- data.frame(success, prob)\n  class(object) = c(\"bindis\", \"data.frame\")\n  return(object)\n}\n\n\nplot.bindis <- function(object) {\n  barplot(object$prob,\n          xlab = \"number of successes\", ylab = \"probability of success\", names.arg = c(object$success))\n}\n\n##1.6 Bin Cumulative\n\n#' @title binomial cumulative distribution\n#' @description computes the cumulative probability for success for all values of success\n#' @param trials integer value for number of trials\n#' @param prob numeric value for the probability of success\n#' @export\n#' @return dataframe with two classes: bincum and data.frame\n#' #' @examples\n#'\n#' bin_cumulative(5, 0.5)\n#' bin_cumulative(5, 0.2)\n\nbin_cumulative = function(trials, prob){\n  success <- 0:trials\n  prob <- bin_probability(success, trials, prob)\n  object <- data.frame(success, prob, cumulative = cumsum(prob))\n  class(object) = c(\"bincum\", \"data.frame\")\n  return(object)\n}\n\n#' @export\nplot.bincum = function(object){\n  plot(object$success, object$cumulative, type = \"b\",xlab = \"number of successes\", ylab = \"cumulative probability of success\")\n  lines(object$success, object$cumulative)\n}\n\n\n##1.7 Bin Variable\n#' @title binomial variable\n#' @description creates a binomial random variable object\n#' @param trials integer value for number of trials\n#' @param prob numeric value for the probability of success\n#' @export\n#' @return named list for class binvar\n#' #' @examples\n#'\n#' bin_variable(5, 0.5)\n#' bin_variable(5, 0.2)\nbin_variable <- function(trials, prob) {\n  if (!(check_trials(trials))){\n    stop(\"invalid trials value\")\n  }\n  if (!(check_prob(prob))){\n    stop(\"invalid prob value\")\n  }\n  res <- list(trials = trials, prob = prob)\n  class(res) <- \"binvar\"\n  return(res)\n}\n\n#'@export\nprint.binvar <- function(x) {\n  cat('\"Binomial variable\"\"\\n\\n')\n  cat(\"Parameters\\n\")\n  cat(\"- Number of trials:\", x$trials, \"\\n\")\n  cat(\"- Prob of success:\", x$prob, \"\\n\")\n  invisible(x)\n}\n\n#'@export\nsummary.binvar <- function(x) {\n  freqs <- data.frame(\n    trials = x$trials,\n    prob = x$prob,\n    mean = aux_mean(x$trials, x$prob),\n    variance = aux_variance(x$trials, x$prob),\n    mode = aux_mode(x$trials, x$prob),\n    skewness = aux_skewness(x$trials, x$prob),\n    kurtosis = aux_kurtosis(x$trials, x$prob)\n  )\n  obj <- list(freqs = freqs)\n  class(obj) <- \"summary.binvar\"\n  return(obj)\n}\n\nprint.summary.binvar <- function(x) {\n  cat('\"Binomial variable\"\"\\n\\n')\n  cat(\"Parameters\\n\")\n  cat(\"- Number of trials:\", x$freqs$trials, \"\\n\")\n  cat(\"- Prob of success:\", x$freqs$prob, \"\\n\\n\")\n  cat(\"Measures\\n\")\n  cat(\"- Mean:\", x$freqs$mean, \"\\n\")\n  cat(\"- Variance:\", x$freqs$variance, \"\\n\")\n  cat(\"- Mode:\", x$freqs$mode, \"\\n\")\n  cat(\"- Skewness:\", x$freqs$skewness, \"\\n\")\n  cat(\"- Kurtosis:\", x$freqs$kurtosis)\n  invisible(x)\n}\n\n\n##1.8\n\n\n#' @title binomial mean\n#' @description finds the mean of the binomial\n#' @param trials integer value for number of trials\n#' @param prob numeric value for the probability of success\n#' @export\n#' @return mean of binomial\n#' #' @examples\n#'\n#' bin_mean(5, 0.5)\n#' bin_mean(10, 0.2)\nbin_mean <- function(trials, prob) {\n  if (!(check_trials(trials))){\n    stop(\"invalid trials value\")\n  }\n  if (!(check_prob(prob))){\n    stop(\"invalid prob value\")\n  }\n  return(aux_mean(trials, prob))\n}\n\n#' @title binomial variance\n#' @description finds the variance of the binomial\n#' @param trials integer value for number of trials\n#' @param prob numeric value for the probability of success\n#' @export\n#' @return variance of binomial\n#' #' @examples\n#'\n#' bin_variance(5, 0.5)\n#' bin_variance(10, 0.2)\nbin_variance <- function(trials, prob) {\n  if (!(check_trials(trials))){\n    stop(\"invalid trials value\")\n  }\n  if (!(check_prob(prob))){\n    stop(\"invalid prob value\")\n  }\n  return(aux_variance(trials, prob))\n}\n\n#' @title binomial mode\n#' @description finds the mode of the binomial\n#' @param trials integer value for number of trials\n#' @param prob numeric value for the probability of success\n#' @export\n#' @return mode of binomial\n#' #' @examples\n#'\n#' bin_mode(5, 0.5)\n#' bin_mode(10, 0.2)\nbin_mode <- function(trials, prob) {\n  if (!(check_trials(trials))){\n    stop(\"invalid trials value\")\n  }\n  if (!(check_prob(prob))){\n    stop(\"invalid prob value\")\n  }\n  return(aux_mode(trials, prob))\n}\n\n#' @title binomial skewness\n#' @description finds the skewness of the binomial\n#' @param trials integer value for number of trials\n#' @param prob numeric value for the probability of success\n#' @export\n#' @return skewness of binomial\n#' #' @examples\n#'\n#' bin_skewness(5, 0.5)\n#' bin_skewness(10, 0.2)\nbin_skewness <- function(trials, prob) {\n  if (!(check_trials(trials))){\n    stop(\"invalid trials value\")\n  }\n  if (!(check_prob(prob))){\n    stop(\"invalid prob value\")\n  }\n  return(aux_skewness(trials, prob))\n}\n\n#' @title binomial kurtosis\n#' @description finds the kurtosis of the binomial\n#' @param trials integer value for number of trials\n#' @param prob numeric value for the probability of success\n#' @export\n#' @return kurtosis of binomial\n#' #' @examples\n#'\n#' bin_kurtosis(5, 0.5)\n#' bin_kurtosis(10, 0.2)\nbin_kurtosis <- function(trials, prob) {\n  if (!(check_trials(trials))){\n    stop(\"invalid trials value\")\n  }\n  if (!(check_prob(prob))){\n    stop(\"invalid prob value\")\n  }\n  return(aux_kurtosis(trials, prob))\n}\n",
    "created" : 1556907739558.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3634712863",
    "id" : "E550AB8F",
    "lastKnownWriteTime" : 1556907891,
    "last_content_update" : 1556907891204,
    "path" : "~/Documents/stat133/binomial/R/binomial.R",
    "project_path" : "R/binomial.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}